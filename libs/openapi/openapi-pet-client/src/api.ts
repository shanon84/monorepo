/* tslint:disable */
/* eslint-disable */
/**
 * Swagger Petstore
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface ErrorDTO
 */
export interface ErrorDTO {
    /**
     * 
     * @type {number}
     * @memberof ErrorDTO
     */
    'code': number;
    /**
     * 
     * @type {string}
     * @memberof ErrorDTO
     */
    'message': string;
}
/**
 * 
 * @export
 * @interface PetDTO
 */
export interface PetDTO {
    /**
     * 
     * @type {number}
     * @memberof PetDTO
     */
    'id': number;
    /**
     * 
     * @type {string}
     * @memberof PetDTO
     */
    'name': string;
    /**
     * 
     * @type {string}
     * @memberof PetDTO
     */
    'tag'?: string;
}

/**
 * PetsApi - axios parameter creator
 * @export
 */
export const PetsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Create a pet
         * @param {PetDTO} petDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets: async (petDTO: PetDTO, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petDTO' is not null or undefined
            assertParamExists('createPets', 'petDTO', petDTO)
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(petDTO, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets: async (limit?: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/pets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById: async (petId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'petId' is not null or undefined
            assertParamExists('showPetById', 'petId', petId)
            const localVarPath = `/pets/{petId}`
                .replace(`{${"petId"}}`, encodeURIComponent(String(petId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PetsApi - functional programming interface
 * @export
 */
export const PetsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PetsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {PetDTO} petDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async createPets(petDTO: PetDTO, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.createPets(petDTO, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetsApi.createPets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listPets(limit?: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<PetDTO>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listPets(limit, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetsApi.listPets']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async showPetById(petId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PetDTO>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.showPetById(petId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['PetsApi.showPetById']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * PetsApi - factory interface
 * @export
 */
export const PetsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PetsApiFp(configuration)
    return {
        /**
         * 
         * @summary Create a pet
         * @param {PetDTO} petDTO 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createPets(petDTO: PetDTO, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.createPets(petDTO, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List all pets
         * @param {number} [limit] How many items to return at one time (max 100)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listPets(limit?: number, options?: RawAxiosRequestConfig): AxiosPromise<Array<PetDTO>> {
            return localVarFp.listPets(limit, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Info for a specific pet
         * @param {string} petId The id of the pet to retrieve
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        showPetById(petId: string, options?: RawAxiosRequestConfig): AxiosPromise<PetDTO> {
            return localVarFp.showPetById(petId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PetsApi - object-oriented interface
 * @export
 * @class PetsApi
 * @extends {BaseAPI}
 */
export class PetsApi extends BaseAPI {
    /**
     * 
     * @summary Create a pet
     * @param {PetDTO} petDTO 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public createPets(petDTO: PetDTO, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).createPets(petDTO, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List all pets
     * @param {number} [limit] How many items to return at one time (max 100)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public listPets(limit?: number, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).listPets(limit, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Info for a specific pet
     * @param {string} petId The id of the pet to retrieve
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PetsApi
     */
    public showPetById(petId: string, options?: RawAxiosRequestConfig) {
        return PetsApiFp(this.configuration).showPetById(petId, options).then((request) => request(this.axios, this.basePath));
    }
}



